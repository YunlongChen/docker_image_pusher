name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"  # 阿里云镜像仓库地址
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"  # 阿里云命名空间
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"  # 阿里云镜像仓库用户名
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"  # 阿里云镜像仓库密码

jobs:
  build:
    name: 拉取并推送镜像
    runs-on: ubuntu-latest
    steps:
      - name: 清理磁盘空间前检查
        run: |
          echo "清理前的磁盘使用情况："
          df -hT

      - name: 释放磁盘空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048  # 保留 2048MB 的根分区空间
          swap-size-mb: 128  # 设置 128MB 的交换空间
          remove-dotnet: 'true'  # 移除 .NET 相关文件以释放空间
          remove-haskell: 'true'  # 移除 Haskell 相关文件以释放空间

      - name: 重启 Docker 服务
        run: sudo service docker restart

      - name: 清理磁盘空间后检查
        run: |
          echo "清理后的磁盘使用情况："
          df -hT

      - name: 检出代码仓库
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 处理 Docker 镜像
        run: |
          # 登录阿里云镜像仓库
          docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
          
          # 定义变量用于检测重复的镜像名称
          declare -A duplicate_check
          declare -A namespace_map
          
          # 第一次遍历：检测是否有重复的镜像名称
          while IFS= read -r line || [ -n "$line" ]; do
              # 跳过空行和注释行
              [[ -z "$line" || $line =~ ^\s*# ]] && continue
          
              # 提取镜像名称（忽略 --platform 参数）
              image=$(echo "$line" | awk '{print $NF}')
              image=${image%%@*}  # 去除 @sha256 部分
              image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')  # 提取镜像名称和标签
              image_name=$(echo "$image_name_tag" | cut -d':' -f1)  # 提取镜像名称
          
              # 解析命名空间
              if [[ $image == *"/"* ]]; then
                  # 如果镜像包含命名空间（例如 homeassistant/home-assistant）
                  namespace=$(echo "$image" | awk -F'/' '{if (NF>2) print $2; else print $1}')
              else
                  # 如果镜像是官方镜像（例如 ubuntu:latest），命名空间为 library
                  namespace="library"
              fi
          
              # 检测是否有重复的镜像名称
              if [[ -n ${namespace_map["$image_name"]} && ${namespace_map["$image_name"]} != "$namespace" ]]; then
                  duplicate_check["$image_name"]=1  # 标记为重复
              fi
              namespace_map["$image_name"]=$namespace  # 记录命名空间
          done < images.txt
          
          # 第二次遍历：处理每个镜像
          while IFS= read -r line || [ -n "$line" ]; do
              # 跳过空行和注释行
              [[ -z "$line" || $line =~ ^\s*# ]] && continue
          
              # 提取平台信息（如果有）
              platform=$(echo "$line" | grep -oP '--platform \K\S+' || true)
              # 提取镜像名称
              image=$(echo "$line" | awk '{print $NF}')
              original_image=$image
              image=${image%%@*}  # 去除 @sha256 部分
          
              # 提取镜像名称和标签
              image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
              image_name=$(echo "$image_name_tag" | cut -d':' -f1)
              tag=$(echo "$image_name_tag" | cut -d':' -f2 -s)
          
              # 解析命名空间
              if [[ $image == *"/"* ]]; then
                  namespace=$(echo "$image" | awk -F'/' '{if (NF>2) print $2; else print $1}')
              else
                  namespace="library"
              fi
          
              # 添加平台前缀（如果需要）
              platform_prefix=""
              [[ -n "$platform" ]] && platform_prefix="${platform//\//_}_"
          
              # 如果镜像名称重复，添加命名空间前缀
              if [[ -n ${duplicate_check["$image_name"]} ]]; then
                  namespace_prefix="${namespace}_"
              else
                  namespace_prefix=""
              fi
          
              # 构建新的镜像名称
              new_image_name="${platform_prefix}${namespace_prefix}${image_name}"
              [[ -n "$tag" ]] && new_image_name+=":$tag"
              new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$new_image_name"
          
              # 拉取镜像
              echo "正在拉取 $original_image..."
              docker pull $original_image
          
              # 打标签
              echo "正在将 $original_image 标记为 $new_image..."
              docker tag $original_image $new_image
          
              # 推送镜像
              echo "正在推送 $new_image..."
              docker push $new_image
          
              # 清理本地镜像以释放磁盘空间
              echo "正在清理 $original_image 和 $new_image..."
              docker rmi $original_image $new_image
          
              # 显示磁盘使用情况
              echo "处理后的磁盘使用情况："
              df -hT
          done < images.txt