name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull and Push Images
    runs-on: ubuntu-latest
    steps:
      - name: Check Disk Space Before Cleanup
        run: |
          echo "Disk usage before cleanup:"
          df -hT

      - name: Free Up Disk Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 128
          remove-dotnet: 'true'
          remove-haskell: 'true'

      - name: Restart Docker Service
        run: sudo service docker restart

      - name: Check Disk Space After Cleanup
        run: |
          echo "Disk usage after cleanup:"
          df -hT

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Process Docker Images
        run: |
          docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
          
          declare -A duplicate_check
          declare -A namespace_map
          
          # First Pass: Detect duplicate image names across namespaces
          while IFS= read -r line || [ -n "$line" ]; do
              [[ -z "$line" || $line =~ ^\s*# ]] && continue
          
              # Extract image name (handle --platform)
              image=$(echo "$line" | awk '{print $NF}')
              image=${image%%@*}
              image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
              image_name=$(echo "$image_name_tag" | cut -d':' -f1)
          
              # Parse namespace (improved logic)
              if [[ $image == *"/"* ]]; then
                  registry_part=$(echo "$image" | awk -F'/' '{print $1}')
                  if [[ $registry_part == *"."* || $registry_part == *":"* ]]; then
                      # Registry with domain/port, namespace is the next part
                      namespace=$(echo "$image" | awk -F'/' '{print $2}')
                  else
                      # Simple namespace (e.g., user/image)
                      namespace=$registry_part
                  fi
              else
                  # Official image without namespace
                  namespace="library"
              fi
          
              # Track duplicates across namespaces
              if [[ -n ${namespace_map["$image_name"]} && ${namespace_map["$image_name"]} != "$namespace" ]]; then
                  duplicate_check["$image_name"]=1
              fi
              namespace_map["$image_name"]=$namespace
          done < images.txt
          
          # Second Pass: Process each image
          while IFS= read -r line || [ -n "$line" ]; do
              [[ -z "$line" || $line =~ ^\s*# ]] && continue
          
              # Extract platform and image
              platform=$(echo "$line" | grep -oP '--platform \K\S+' || true)
              image=$(echo "$line" | awk '{print $NF}')
              original_image=$image
              image=${image%%@*}
          
              # Parse namespace again (consistent with first pass)
              if [[ $image == *"/"* ]]; then
                  registry_part=$(echo "$image" | awk -F'/' '{print $1}')
                  if [[ $registry_part == *"."* || $registry_part == *":"* ]]; then
                      namespace=$(echo "$image" | awk -F'/' '{print $2}')
                  else
                      namespace=$registry_part
                  fi
              else
                  namespace="library"
              fi
          
              image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
              image_name=$(echo "$image_name_tag" | cut -d':' -f1)
              tag=$(echo "$image_name_tag" | cut -d':' -f2 -s)
          
              # Generate new image name
              platform_prefix=""
              [[ -n "$platform" ]] && platform_prefix="${platform//\//_}_"
              [[ -n ${duplicate_check["$image_name"]} ]] && namespace_prefix="${namespace}_" || namespace_prefix=""
          
              new_image_tag="${platform_prefix}${namespace_prefix}${image_name}"
              [[ -n "$tag" ]] && new_image_tag+=":$tag"
          
              new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$new_image_tag"
          
              # Pull, tag, and push
              docker pull $original_image
              docker tag $original_image $new_image
              docker push $new_image
          
              # Cleanup
              docker rmi $original_image $new_image
          done < images.txt